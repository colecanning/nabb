import NextAuth, { AuthOptions } from 'next-auth';
import GoogleProvider from 'next-auth/providers/google';

// Example: Integration with Google Workspace Directory
// This is an ADVANCED example - requires additional setup

export const authOptions: AuthOptions = {
  providers: [
    GoogleProvider({
      clientId: process.env.GOOGLE_CLIENT_ID || '',
      clientSecret: process.env.GOOGLE_CLIENT_SECRET || '',
      authorization: {
        params: {
          prompt: "consent",
          access_type: "offline",
          response_type: "code",
          // Request additional scopes for workspace integration
          scope: 'openid email profile https://www.googleapis.com/auth/admin.directory.user.readonly'
        }
      }
    }),
  ],
  callbacks: {
    async signIn({ user, account }) {
      if (!user.email) {
        return false;
      }

      // Check if user is from your workspace domain
      const workspaceDomain = process.env.WORKSPACE_DOMAIN; // e.g., 'yourcompany.com'
      const emailDomain = user.email.split('@')[1];
      
      if (workspaceDomain && emailDomain !== workspaceDomain) {
        return false; // Not from your workspace
      }

      // Optional: Check if user is in a specific Google Group
      // This requires calling Google Admin SDK Directory API
      // const isInGroup = await checkGoogleGroupMembership(
      //   account.access_token,
      //   user.email,
      //   'allowed-users@yourcompany.com'
      // );
      // return isInGroup;

      return true;
    },
    async session({ session, token }) {
      if (session.user) {
        session.user.email = token.email as string;
      }
      return session;
    },
  },
  pages: {
    signIn: '/login',
    error: '/login',
  },
  secret: process.env.NEXTAUTH_SECRET,
};

const handler = NextAuth(authOptions);
export { handler as GET, handler as POST };

// Helper function example (requires Google Admin SDK)
// async function checkGoogleGroupMembership(
//   accessToken: string,
//   userEmail: string,
//   groupEmail: string
// ): Promise<boolean> {
//   const response = await fetch(
//     `https://admin.googleapis.com/admin/directory/v1/groups/${groupEmail}/hasMember/${userEmail}`,
//     {
//       headers: {
//         Authorization: `Bearer ${accessToken}`,
//       },
//     }
//   );
//   const data = await response.json();
//   return data.isMember === true;
// }

